[{"/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/index.js":"1","/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/App.js":"2","/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/reportWebVitals.js":"3","/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/pages/Login.js":"4","/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/firebase.js":"5","/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/components/Nav.js":"6","/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/contexts/Auth.js":"7","/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/components/PrivateRoute.js":"8","/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/pages/Dashboard.js":"9","/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/components/LoginForm.js":"10","/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/components/AddPlantForm.js":"11","/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/components/MyPlants.js":"12","/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/api/fetchUserPlants.js":"13","/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/components/PlantCard.js":"14","/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/pages/Homepage.js":"15"},{"size":570,"mtime":1611797358395,"results":"16","hashOfConfig":"17"},{"size":726,"mtime":1611853199491,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1611797358395,"results":"19","hashOfConfig":"17"},{"size":267,"mtime":1611797358395,"results":"20","hashOfConfig":"17"},{"size":558,"mtime":1611797358394,"results":"21","hashOfConfig":"17"},{"size":591,"mtime":1611797358394,"results":"22","hashOfConfig":"17"},{"size":736,"mtime":1611797358394,"results":"23","hashOfConfig":"17"},{"size":574,"mtime":1611797358394,"results":"24","hashOfConfig":"17"},{"size":704,"mtime":1611797358395,"results":"25","hashOfConfig":"17"},{"size":2379,"mtime":1611797358393,"results":"26","hashOfConfig":"17"},{"size":3633,"mtime":1611797358393,"results":"27","hashOfConfig":"17"},{"size":1464,"mtime":1611797358393,"results":"28","hashOfConfig":"17"},{"size":255,"mtime":1611790503620,"results":"29","hashOfConfig":"17"},{"size":3020,"mtime":1611852734523,"results":"30","hashOfConfig":"17"},{"size":332,"mtime":1611853090230,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"vhe2ay",{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/index.js",[],["65","66"],"/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/App.js",["67","68"],"/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/reportWebVitals.js",[],"/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/pages/Login.js",[],"/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/firebase.js",[],"/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/components/Nav.js",[],"/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/contexts/Auth.js",[],"/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/components/PrivateRoute.js",[],"/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/pages/Dashboard.js",[],"/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/components/LoginForm.js",[],"/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/components/AddPlantForm.js",["69"],"import { Button, Input, InputLabel, MenuItem, Select, TextField } from '@material-ui/core'\nimport React, { useContext, useState } from 'react'\nimport { AuthContext } from '../contexts/Auth'\nimport styled from 'styled-components'\nimport { db, storage } from '../firebase'\nimport { useHistory } from 'react-router-dom'\n\nconst AddPlantForm = () => {\n\n    const {currentUser} = useContext(AuthContext)\n    const history = useHistory()\n\n    const initialForm = {\n        user: currentUser.uid,\n        nickname: '',\n        species: '',\n        h2oFrequency: '',\n        image: ''\n    }\n\n    const [plant, setPlant] = useState(initialForm)\n    const [uploading, setUploading] = useState(false)\n\n    const handleChange = (e) => {\n        setPlant({\n            ...plant,\n            [e.target.name]: e.target.value\n        })\n\n    }\n\n    const frequency = [\n        {title: 'Daily', value: 1},\n        {title: 'Every other day', value: 2},\n        {title: 'Weekly', value: 7},\n        {title: 'Bi-Weekly', value: 14}\n     ]\n\n     const onFileChange = async (e) => {\n        setUploading(true)\n        const file = e.target.files[0]\n        const fileRef = storage.ref(`images/${file.name}`)\n        await fileRef.put(file)\n        setPlant({\n            ...plant, \n            image: await fileRef.getDownloadURL()\n        })\n        setUploading(false)\n    }\n \n\n    const onSubmit = (e) => {\n        e.preventDefault()\n        db.collection('plants').add(plant)\n        setPlant(initialForm)\n        history.push('/dashboard')\n    }\n\n\n\n    return (\n        <>\n            <Form onSubmit={onSubmit}>\n                <Heading>Add a Plant</Heading>\n                <TextField \n                    label='Plant Nickname'\n                    name='nickname'\n                    value={plant.nickname}\n                    onChange={handleChange}\n                    variant='outlined'\n                    margin='dense'\n                />\n                <TextField \n                    label='Plant Species'\n                    name='species'\n                    value={plant.species}\n                    onChange={handleChange}\n                    variant='outlined'\n                    margin='dense'\n                />\n                <InputLabel id=\"frequency\">Water Frequency</InputLabel>\n                <Select\n                    id='frequency' \n                    name='h2oFrequency' \n                    value={plant.h2oFrequency} \n                    onChange={handleChange}\n                    variant='outlined'\n                    margin='dense'\n                >\n                    {frequency.map(item => \n                        <MenuItem value={item.title}>{item.title}</MenuItem>    \n                    )}\n                </Select>\n                <InputLabel id='image'>Plant Image</InputLabel>\n                <Input id='image' type='file' onChange={onFileChange} />\n                <Button\n                    disabled={uploading}\n                    type='submit' \n                    color='primary' \n                    variant='contained'\n                >\n                    Add Plant\n                </Button>\n                \n            </Form>\n        </>\n    )\n}\n\nexport default AddPlantForm\n\nconst Wrapper = styled.div`\n    padding: 2rem;\n`\n\nconst Heading = styled.h2`\n    font-size: 1.8rem;\n    margin: 0;\n    @media (max-width: 600px){\n        text-align: center;  \n    }\n`\nconst Form = styled.form`\n    display: grid;\n    grid-template-columns: 1fr;\n    border: 1px solid #555;\n    border-radius: 5px;\n    max-width: 300px;\n    padding: 1rem;\n    gap: .5rem;\n    & h2{\n        text-align: center;\n    }\n`","/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/components/MyPlants.js",["70"],"import React, { useState, useEffect} from 'react'\nimport { db } from '../firebase'\nimport PlantCard from './PlantCard'\nimport styled from 'styled-components'\n\nconst MyPlants = ({uid}) => {\n\n    const [plants, setPlants] = useState([])\n\n\n    // useEffect(() => {\n    //     db.collection('plants').where(\"user\", \"==\", uid).onSnapshot(snapshot => \n    //     {\n    //         let data = snapshot.docs.map(doc => ({...doc.data(), id: doc.id}))\n    //         setPlants(data)\n    //     })\n    // },[])\n\n    useEffect(() => {\n        db.collection('plants').where(\"user\", \"==\", uid).onSnapshot(snapshot => \n            {\n                let data = snapshot.docs.map(doc => ({...doc.data(), id: doc.id}))\n                setPlants(data)\n            })\n    },[])\n\n    useEffect(() => {\n        console.log(plants)\n    }, [plants])\n\n    return (\n        <>\n            <Heading>My Plants</Heading>\n            <Plants>\n                {plants.map(plant => \n                    <PlantCard\n                        {...plant}\n                    />\n                )}\n            </Plants>\n        </>\n    )\n}\n\nexport default MyPlants\n\nconst Heading = styled.h2`\n    font-size: 1.8rem;\n    margin: 0;\n    @media (max-width: 600px){\n        text-align: center;  \n    }\n`\n\nconst Plants = styled.div`\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 350px));\n    gap: 1rem;\n    @media (max-width: 600px){\n        justify-content: center;    \n    }\n`","/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/api/fetchUserPlants.js",[],"/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/components/PlantCard.js",["71","72"],"/Users/petevs/Documents/Lambda/unit-3-build/front-end/client/src/pages/Homepage.js",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":1,"column":17,"nodeType":"79","messageId":"80","endLine":1,"endColumn":25},{"ruleId":"77","severity":1,"message":"81","line":1,"column":27,"nodeType":"79","messageId":"80","endLine":1,"endColumn":36},{"ruleId":"77","severity":1,"message":"82","line":112,"column":7,"nodeType":"79","messageId":"80","endLine":112,"endColumn":14},{"ruleId":"83","severity":1,"message":"84","line":25,"column":7,"nodeType":"85","endLine":25,"endColumn":9,"suggestions":"86"},{"ruleId":"77","severity":1,"message":"87","line":26,"column":9,"nodeType":"79","messageId":"80","endLine":26,"endColumn":13},{"ruleId":"88","severity":1,"message":"89","line":63,"column":13,"nodeType":"90","endLine":63,"endColumn":31},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Wrapper' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'uid'. Either include it or remove the dependency array.","ArrayExpression",["93"],"'user' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},"Update the dependencies array to be: [uid]",{"range":"96","text":"97"},[753,755],"[uid]"]